#+TITLE: PostgreSQL

* Installation

** Installation unter Windows

- [[https://www.openscg.com/bigsql/postgresql/installers/][PostgreSQL für Windows]]
- [[https://postgis.net/windows_downloads/][PostGIS für Windows]]
- [[https://stackoverflow.com/questions/42806784/how-to-alter-the-path-for-postgres-looking-for-extensions][Bug]]
- [[https://www.postgresql.org/ftp/pgadmin/pgadmin4/v3.0/windows/][pgadmin4]]

** Installation unter Linux (Debian)

#+BEGIN_SRC sh :dir /sudo:: :results output silent
apt install postgresql
#+END_SRC

** Installation mit Docker

Der folgende Befehl startet einen Docker-Container mit Postgres.

#+BEGIN_SRC sh :results output silent
docker run --name postgres -e POSTGRES_USER=martin -e POSTGRES_PASSWORD=geheim  -d postgres
#+END_SRC


| Variable               | Wert   | Bedeutung                                                                                                        |
|------------------------+--------+------------------------------------------------------------------------------------------------------------------|
| POSTGRES_USER          | martin | This optional environment variable is used in conjunction with POSTGRES_PASSWORD to set a user and its password. |
| POSTGRES_PASSWORD      | geheim | This environment variable sets the superuser password for PostgreSQL.                                            |

Anschließen läßt sich mit folgendem Befehl ein weiterer  Docker-Container starten, der den ~psql~ (den CLI-Client von Postgres) ausführt und sich mit dem Docker-Container ~postgres~ verbindet.

#+BEGIN_SRC sh :results output silent
docker run -it --rm --link postgres:postgres postgres psql -h postgres -U martin
#+END_SRC


Optional kann dieser Befehl in einem ~alias~ vermerkt werden.

#+BEGIN_SRC sh :results output silent
alias psql='docker run -it --rm --link postgres:postgres postgres psql -h postgres'
#+END_SRC

Damit der ~alias~ daurhaft bestehen bleibt, kann er mit folgendem Befehl der ~.bashrc~ henzugefügt werden.

#+BEGIN_SRC sh :results output silent
echo "alias psql='docker run -it --rm --link postgres:postgres postgres psql -h postgres'" >> ~/.bashrc
source ~/.bashrc
#+END_SRC


* Administration

** Starten und Stoppen von PostgreSQL

*** Starten und Stoppen von PostgreSQL unter Windows

*** Starten und Stoppen von PostgreSQL unter Linux

Der aktuelle Status des Service ~postgresql~ kann mit dem folgenden Befehl erfragt werden.
#+BEGIN_SRC sh :dir /sudo:: :results output silent
systemctl status postgresql
#+END_SRC

Der Service ~postgresql~ kann mit dem folgenden Befehl gestertet werden.
#+BEGIN_SRC sh :dir /sudo:: :results output silent
systemctl start postgresql
#+END_SRC

Der Service ~postgresql~ kann mit dem folgenden Befehl gestoppt werden.
#+BEGIN_SRC sh :dir /sudo:: :results output silent
systemctl stop postgresql
#+END_SRC

*** Starten und Stoppen von PostgreSQL unter Docker
** Benutzerverwaltung

*** Anlegen eines Benutzers

Der folgende Befehl legt den Benutzer ~martin~ mit dem Passwort ~geheim~.
#+BEGIN_SRC sql
CREATE ROLE martin WITH PASSWORD 'geheim';
#+END_SRC

*** Löschen eines Benutzers

Der folgende Befehl löscht den Benutzer ~martin~.
#+BEGIN_SRC sql
DROP ROLE martin;
#+END_SRC

*** Benutzer Zugriff auf eine Datenbank gewähren

Der folgende Befehl gewärt dem Benutzer ~martin~ Zugriff auf die Datenbank ~martin~.
#+BEGIN_SRC sql
GRANT ALL ON DATABASE martin TO martin;
#+END_SRC
** Konfiguration

*** Konfigurationsdateien
- postgresql.conf
- pg_hba.conf
- pg_ident.conf
  
* Datensicherungen

** Sichern und Zurückspielen

** Sichern und Zurückspielen einer Datenbank

Sichern der Datenbank /dbname/ in die Datei /dumpfile/.
#+BEGIN_SRC sh
pg_dump dbname > dumpfile
#+END_SRC

Zurückspielen der Datenbank /dbname/ aus der Datei /dumpfile/.
#+BEGIN_SRC sh
psql dbname < dumpfile
#+END_SRC

Zurückspielen der Datenbank /dbname/ aus der Datei /dumpfile/ mit Abbruch im Fehlerfall.
#+BEGIN_SRC sh
psql --set ON_ERROR_STOP=on dbname < dumpfile
#+END_SRC

** Sichern und Zurückspielen aller Datenbanken

Sichern aller Datenbanken in die Datei /dumpfile/.
#+BEGIN_SRC sh
pg_dumpall > dumpfile
#+END_SRC

Zurückspielen aller Datenbanken aus der Datei /dumpfile/.
#+BEGIN_SRC sh
psql -f dumpfile postgres
#+END_SRC

Sichern aller Cluster-weiten Daten ohne die eigentlichen Datenbanken in die Datei /dumpfile/.
#+BEGIN_SRC sh
pg_dumpall --globals-only > dumpfile
#+END_SRC

** Sichern und Zurückspielen mit Kompression
Sichern der Datenbank /dbname/ in die Datei /dumpfile/ im /custom/-Format, dass standardmäßig komprimiert ist.
#+BEGIN_SRC sh
pg_dump -Fc dbname > filename
#+END_SRC

Zurückspielen der Datenbank /dbname/ aus der im /custom/-Format gespeicherten Datei /dumpfile/.
#+BEGIN_SRC sh
pg_restore -d dbname filename
#+END_SRC

* Anwendung

** Konzepte
- cluster
- database
- table
- row
- columns

** Datenbanken
*** Anlegen einer Datenbank
Der folgende Befehl legt die Datenbank ~martin~ an.
#+BEGIN_SRC sql
CREATE DATABASE martin;
#+END_SRC
