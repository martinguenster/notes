#+TITLE: MySQL
* Installation

** Installation unter Windows
...

** Installation unter Linux (Debian)
#+BEGIN_SRC sh
sudo apt install mysql-server
#+END_SRC

* Administration

** Benutzer und Rechte
*** Benutzer user@localhost mit dem Passwort password anlegen
#+BEGIN_SRC sql
CREATE USER 'user'@'localhost' IDENTIFIED BY 'password';
#+END_SRC

*** Aktuellen Benutzer anzeigen
#+BEGIN_SRC sql
SELECT USER();
#+END_SRC

*** Rechte eines Benutzers anzeigen
#+BEGIN_SRC sql
SHOW GRANTS;
#+END_SRC
#+BEGIN_SRC sql
SHOW GRANTS FOR 'root'@'localhost';
#+END_SRC

** Character Set und Collation

*** Konfigurierte Character Sets

Die konfigurierten Character Sets lassen sich mit dem folgendnen Befehl anzeigen.

#+BEGIN_SRC sql
SHOW GLOBAL VARIABLES LIKE 'character_set\_%';
#+END_SRC

Außer bei ~character_set_filesystem~ und ~character_set_system~ sollte hier alles auf ~utf8mb4~ stehen.

*** ~DEFAULT_CHARACTER_SET_NAME~ und ~DEFAULT_COLLATION_NAME~ für Datenbanken anzeigen

Der ~DEFAULT_CHARACTER_SET_NAME~ und der ~DEFAULT_COLLATION_NAME~ für Datenbanken lassen sich mit dem folgendnen Befehl anzeigen.

#+BEGIN_SRC sql
SELECT
	schema_name,
	default_character_set_name,
	DEFAULT_COLLATION_NAME
FROM
	information_schema.SCHEMATA
ORDER BY
	schema_name;
#+END_SRC

Hier sollte für eigene Datenbanken ~default_character_set_name~ auf ~utf8mb4~ und der ~default_collation_name~ auf ~utf8mb4_0900_ai_ci~ stehen.


*** ~character_set_name~ und ~collation_name~ für Tabellen anzeigen

Der ~character_set_name~ und der ~collation_name~ der Tabellen lassen sich mit dem folgendnen Befehl anzeigen.

#+BEGIN_SRC sql
SELECT
	T.table_schema,
	lower(t.TABLE_NAME),
	CCSA.character_set_name,
	CCSA.collation_name
FROM
	information_schema.`TABLES` T
INNER JOIN information_schema.`COLLATION_CHARACTER_SET_APPLICABILITY` CCSA ON CCSA.collation_name = T.table_collation
AND T.table_schema = database();
#+END_SRC

Hier sollte für die  ~character_set_name~ auf ~utf8mb4~ und der ~collation_name~ auf ~utf8mb4_0900_ai_ci~ stehen.

*** ~character_set_name~ und ~COLLATION_NAME~ für Spalten anzeigen lassen

...

#+BEGIN_SRC sql
SELECT
	TABLE_SCHEMA,
	TABLE_NAME,
	COLUMN_NAME,
	character_set_name,
	COLLATION_NAME
FROM
	information_schema.`COLUMNS`
WHERE
	table_schema = database();
#+END_SRC

...

** Server SQL Modes
...
* Anwendung

* Monitoring

* Backups

** Logisches Backup mit /mysqldump/
Für das Erstellen eines Backups mit /mysqldump/ werden, je nach Anwendung verschiedene Rechte vorausgesetzt.
- SELECT zum Sichern von Tabellen
- SHOW VIEWS zum Sichern von Views
- TRIGGERS zum Sichern von Triggern
- LOCK TABLES zum Sperren von Tabellen
Für das Einspielen eines Backups mit /mysql/ ist das CREATE-Recht notwending.

*** Erstellen ein logischen Backups

**** Sichern einer Datenbank.
#+BEGIN_SRC sh
mysqldump db_name
#+END_SRC

**** Sichern mehrerer Tabellen einer Datenbank
#+BEGIN_SRC sh
mysqldump db_name tbl_name tb2_name...
#+END_SRC

**** Sichern aller Datenbanken
#+BEGIN_SRC sh
mysqldump --all-databases
#+END_SRC

*** Erstellen eines logischen Backups zur Datensicherung
#+BEGIN_SRC sh
mysqldump \
--user=root \
--all-databases \
--single-transaction \
--triggers \
--routines \
--events \
--hex-blob \
--no-data \
-r dump.sql
#+END_SRC

*** Erstellen eines logischen Backups ohne Daten
#+BEGIN_SRC sh
mysqldump \
--user=root \
--single-transaction \
--triggers \
--routines \
--events \
--hex-blob \
--no-data \
-r dump.sql \
db_name
#+END_SRC

*** Erstellen eines logischen Backups ohne CREATE-Statements
#+BEGIN_SRC sh
mysqldump \
--user=root \
--single-transaction \
--no-create-info=true \
-r dump.sql \
db_name
#+END_SRC

** Physikalisches Backup
...
